name: E2E Tests
on:
  deployment_status:
  workflow_dispatch:
    inputs:
      base_url:
        description: 'Base URL to test against'
        required: false
        default: ''

jobs:
  Setup:
    if: github.event.deployment_status.state == 'success' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh
      - name: Setup uv cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/uv
            ~/.local/share/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-
      - name: Install dependencies
        run: uv sync
      - run: |
          config_file=$(./scripts/get_client_config.sh)
          uv run cookiecutter . --config-file $config_file --no-input -f
          cat $config_file
      - uses: actions/upload-artifact@v4
        with:
          name: my_project
          path: my_project/
          retention-days: 1
  Playwright:
    needs: Setup
    timeout-minutes: 60
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.49.1-noble
    if: github.event.deployment_status.state == 'success' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
        with:
          # For deployment_status events, we need to explicitly checkout the deployment's ref
          ref: ${{ github.event.deployment.sha || github.ref }}
      - uses: actions/download-artifact@v4
        with:
          name: my_project
          path: my_project/
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          cache-dependency-path: ./my_project/client/package-lock.json
      - name: ðŸ“¦ Install frontend dependencies
        working-directory: ./my_project/client
        run: npm ci
      # Browsers are pre-installed in the Playwright Docker image
      # No need to install them again!
      - name: Create .env file for Playwright
        working-directory: ./my_project/client
        run: |
          echo "PLAYWRIGHT_TEST_USER_PASS=${{ secrets.PLAYWRIGHT_TEST_USER_PASS }}" > .env
      - name: Run Playwright tests against ${{ github.event.deployment_status.environment_url }}
        working-directory: ./my_project/client
        run: npx playwright test --reporter=html
        env:
          HOME: /root  # Required for Firefox to run in the container
          NPM_CONFIG_PRODUCTION: false
          PLAYWRIGHT_TEST_BASE_URL: ${{ github.event.deployment_status.environment_url || github.event.inputs.base_url }}
          PLAYWRIGHT_TEST_USER_PASS: ${{ secrets.PLAYWRIGHT_TEST_USER_PASS }}
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: my_project/client/playwright-report/
          retention-days: 30
